dt_item_id <- data.table(common_item_id = seq(1: nrow(unique_list_item)),
item_name_short = unique_list_item$item_name_short,
colour = unique_list_item$colour
)
# Merge id to the table
dt_refrigerator <- merge(dt_refrigerator, dt_item_id, by = c("item_name_short","colour"))
write.table(dt_refrigerator, "dt_refrigerator.txt", sep = "|", row.names = FALSE)
```
Create technical attribute tabele to unify attributes
```{r}
# Filter for relevant columns
dt_attribute <- dt_refrigerator %>% select("common_item_id",
"item_name_short",
"colour",
"producer",
"type",
"energy_class",
"energy_consumption",
"guarantee_month",
"width_cm",
"height_cm",
"depth_cm",
"weight_kg",
"n_doors",
"cooling_capacity_l",
"freezing_capacity_l")
# Create attribute table
dt_attribute <- dt_attribute[,list(item_name_short = max(item_name_short, na.rm = T),
colour = max(colour, na.rm = T),
producer = max(producer, na.rm = T),
type = max(type, na.rm = T),
energy_class = max(energy_class, na.rm = T),
energy_consumption = max(energy_consumption, na.rm = T),
guarantee_month = max(guarantee_month, na.rm = T),
width_cm = max(width_cm, na.rm = T),
height_cm = max(height_cm, na.rm = T),
depth_cm = max(depth_cm, na.rm = T),
weight_kg = max(weight_kg, na.rm = T),
n_doors = max(n_doors, na.rm = T),
cooling_capacity_l = max(cooling_capacity_l, na.rm = T),
freezing_capacity_l = max(freezing_capacity_l, na.rm = T)),
by = common_item_id]
# Change Inf to Na
dt_attribute[dt_attribute$energy_consumption == "-Inf", "energy_consumption"] <- NA
dt_attribute[dt_attribute$guarantee_month == "-Inf", "guarantee_month"] <- NA
dt_attribute[dt_attribute$width_cm == "-Inf", "width_cm"] <- NA
dt_attribute[dt_attribute$height_cm == "-Inf", "height_cm"] <- NA
dt_attribute[dt_attribute$depth_cm == "-Inf", "depth_cm"] <- NA
dt_attribute[dt_attribute$weight_kg == "-Inf", "weight_kg"] <- NA
dt_attribute[dt_attribute$n_doors == "-Inf", "n_doors"] <- NA
dt_attribute[dt_attribute$cooling_capacity_l == "-Inf", "cooling_capacity_l"] <- NA
dt_attribute[dt_attribute$freezing_capacity_l == "-Inf", "freezing_capacity_l"] <- NA
dt_attribute[dt_attribute$colour == "-Inf", "colour"] <- NA
dt_attribute[dt_attribute$producer == "-Inf", "producer"] <- NA
dt_attribute[dt_attribute$type == "-Inf", "type"] <- NA
dt_attribute[dt_attribute$energy_class == "-Inf", "energy_class"] <- NA
```
Calculate new variable: common_item_name
```{r}
dt_attribute$common_item_name <- paste(dt_attribute$item_name_short, dt_attribute$colour, sep = " ")
```
Calculate new variable: total_capacity
```{r}
dt_attribute$total_capacity <- ifelse(is.na(dt_attribute$cooling_capacity_l) == TRUE,
0,
dt_attribute$cooling_capacity_l
) +
ifelse(is.na(dt_attribute$freezing_capacity_l) == TRUE,
0,
dt_attribute$freezing_capacity_l
)
```
Create final table
```{r}
dt_refrigerator_final <- dt_refrigerator %>% select("common_item_id",
"item_price_edigital",
"item_price_mediamarkt",
"website",
"link_edigital",
"link_mediamarkt"
)
# item_price
dt_refrigerator_final$item_price <- ifelse(dt_refrigerator_final$website == "edigital",
dt_refrigerator_final$item_price_edigital,
dt_refrigerator_final$item_price_mediamarkt)
# link
dt_refrigerator_final$link <- ifelse(dt_refrigerator_final$website == "edigital",
dt_refrigerator_final$link_edigital,
dt_refrigerator_final$link_mediamarkt)
# Drop columns
dt_refrigerator_final$item_price_edigital <- NULL
dt_refrigerator_final$item_price_mediamarkt <- NULL
dt_refrigerator_final$link_edigital <- NULL
dt_refrigerator_final$link_mediamarkt <- NULL
# Merge attributes
dt_refrigerator_final <- merge(dt_refrigerator_final, dt_attribute, by = "common_item_id")
# Rearrange columns order
dt_refrigerator_final <- dt_refrigerator_final %>% select("common_item_id",
"common_item_name",
"item_name_short",
"colour",
"producer",
"type",
"energy_class",
"energy_consumption",
"guarantee_month",
"width_cm",
"height_cm",
"depth_cm",
"weight_kg",
"n_doors",
"cooling_capacity_l",
"freezing_capacity_l",
"total_capacity",
"website",
"item_price",
"link")
```
Save clean table to the work folder
```{r}
data_out <-paste0(dir, "work/")
write_tsv(dt_refrigerator_final, path = paste0(data_out,"dt_refrigerator_workfile.tsv"))
write.table(dataset,path = paste0(data_out,"dt_refrigerator_workfile.csv"), sep = "|", row.names = FALSE, col.names = TRUE)
```
# clear memory
rm(list=ls())
# set working directory
dir <- "C:/Users/gat/OneDrive – Central European University/Data_architecture/Home_work_data_product/"
data_in <- paste0(dir, "raw/")
data_out <-paste0(dir, "clean/")
# Read libraries
library(tidyverse)     # General purpose data wrangling
library(data.table)
library(dplyr)
library(readr) # for tsv
library(stringr)
```{r}
# Read table
dt_refrigerator <- read_tsv(paste0(data_out, 'dt_refrigerator_openrefiner.tsv')) %>% as.data.table()
```
Check values: producer
```{r}
# Check unique values
dt_refrigerator$producer %>% unique()
# OK
```
Check values: type
```{r}
# Check unique values
dt_refrigerator$type %>% unique()
# OK
```
Check values: energy_class
```{r}
# Check unique values
dt_refrigerator$energy_class %>% unique()
# OK
```
Check values: guarantee_month
```{r}
# Change data type
dt_refrigerator$guarantee_month <- dt_refrigerator$guarantee_month %>% as.numeric()
# Check unique values
dt_refrigerator$guarantee_month %>% unique()
# OK
```
Check values: colour
```{r}
# Check unique values
dt_refrigerator$colour %>% unique()
# OK
```
#####################
3. Further data Cleaning with R
#####################
Correct values: energy_consumption
```{r}
# get the first 3 characters, typically it is a number meaning the annual energy consumption in kWh
# if it is smaller (or not a number) than 1 -> get the first 5 character
dt_refrigerator$energy_consumption <- ifelse(substr(dt_refrigerator$energy_consumption, 1, 3) < 1,
substr(dt_refrigerator$energy_consumption, 1, 5),
substr(dt_refrigerator$energy_consumption, 1, 3)
)
# in some case it contains "/" -> get the last 5 character
dt_refrigerator$energy_consumption <- ifelse(grepl("/",substr(dt_refrigerator$energy_consumption, 1, 5), fixed = TRUE),
str_sub(dt_refrigerator$energy_consumption, -5),
dt_refrigerator$energy_consumption
)
# change decimal
dt_refrigerator$energy_consumption <- str_replace(dt_refrigerator$energy_consumption, ",", ".")
# change variable type
dt_refrigerator$energy_consumption <- as.numeric(dt_refrigerator$energy_consumption)
# if value < 5 -> it is a daily consumption data -> convert it to annual one
dt_refrigerator$energy_consumption <- ifelse(dt_refrigerator$energy_consumption < 5,
dt_refrigerator$energy_consumption * 365,
dt_refrigerator$energy_consumption
)
# Round values
dt_refrigerator$energy_consumption <- round(dt_refrigerator$energy_consumption,0)
```
Correct values: width_cm
```{r}
# if "cm" is included -> change it to ""
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, "cm", "")
# if space is included -> change it to ""
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, " ", "")
# change decimal
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, ",", ".")
# "mm" is included -> convert is to cm
dt_refrigerator$width_cm <- ifelse(grepl("mm", dt_refrigerator$width_cm,fixed = TRUE),
as.numeric(str_replace(dt_refrigerator$width_cm, "mm", "")) / 10,
dt_refrigerator$width_cm
)
# change variable type
dt_refrigerator$width_cm <- as.numeric(dt_refrigerator$width_cm)
# Round values
dt_refrigerator$width_cm <- round(dt_refrigerator$width_cm, 0)
```
Correct values: height_cm
```{r}
# if "cm" is included -> change it to ""
dt_refrigerator$height_cm <- str_replace(dt_refrigerator$height_cm, "cm", "")
# if "vm" is included (typo!) -> change it to ""
dt_refrigerator$height_cm <- str_replace(dt_refrigerator$height_cm, "vm", "")
# if space is included -> change it to ""
dt_refrigerator$height_cm <- str_replace(dt_refrigerator$height_cm, " ", "")
# change decimal
dt_refrigerator$height_cm <- str_replace(dt_refrigerator$height_cm, ",", ".")
# "mm" is included -> convert is to cm
dt_refrigerator$height_cm <- ifelse(grepl("mm", dt_refrigerator$height_cm,fixed = TRUE),
as.numeric(str_replace(dt_refrigerator$height_cm, "mm", "")) / 10,
dt_refrigerator$height_cm
)
# change variable type
dt_refrigerator$height_cm <- as.numeric(dt_refrigerator$height_cm)
# Round values
dt_refrigerator$height_cm <- round(dt_refrigerator$height_cm, 0)
```
Correct values: depth_cm
```{r warning=FALSE}
# if "cm" is included -> change it to ""
dt_refrigerator$depth_cm <- str_replace(dt_refrigerator$depth_cm, "cm", "")
# if "vm" is included (typo!) -> change it to ""
dt_refrigerator$depth_cm <- str_replace(dt_refrigerator$depth_cm, "vm", "")
# if space is included -> change it to ""
dt_refrigerator$depth_cm <- str_replace(dt_refrigerator$depth_cm, " ", "")
# change decimal
dt_refrigerator$depth_cm <- str_replace(dt_refrigerator$depth_cm, ",", ".")
# "mm" is included -> convert is to cm
dt_refrigerator$depth_cm <- ifelse(grepl("mm", dt_refrigerator$depth_cm,fixed = TRUE),
as.numeric(str_replace(dt_refrigerator$depth_cm, "mm", "")) / 10,
dt_refrigerator$depth_cm
)
# change variable type
dt_refrigerator$depth_cm <- as.numeric(dt_refrigerator$depth_cm)
# Round values
dt_refrigerator$depth_cm <- round(dt_refrigerator$depth_cm, 0)
```
Correct values: weight_kg
```{r}
# if "(nettó) / (bruttó) or anithing with paranthesis" is included -> change it to ""
dt_refrigerator$weight_kg <- gsub(" *\\(.*?\\) *", "", dt_refrigerator$weight_kg)
# if "kg" is included -> change it to ""
dt_refrigerator$weight_kg <- str_replace(dt_refrigerator$weight_kg, "kg", "")
# if space is included -> change it to ""
dt_refrigerator$weight_kg <- str_replace(dt_refrigerator$weight_kg, " ", "")
# change decimal
dt_refrigerator$weight_kg <- str_replace(dt_refrigerator$weight_kg, ",", ".")
# If"/" is included (beacause 2 values are recorded) -> get the first number before the slash mark
dt_refrigerator$weight_kg <- ifelse(grepl("/", dt_refrigerator$weight_kg,fixed = TRUE),
str_sub(dt_refrigerator$weight_kg, 1, 2),
dt_refrigerator$weight_kg
)
# change variable type
dt_refrigerator$weight_kg <- as.numeric(dt_refrigerator$weight_kg)
# Round values
dt_refrigerator$weight_kg <- round(dt_refrigerator$weight_kg, 0)
```
Correct values: n_doors
```{r}
# if "db" is included -> change it to ""
dt_refrigerator$n_doors <- str_replace(dt_refrigerator$n_doors, "db", "")
# if space is included -> change it to ""
dt_refrigerator$n_doors <- str_replace(dt_refrigerator$n_doors, " ", "")
# change variable type
dt_refrigerator$n_doors <- as.numeric(dt_refrigerator$n_doors)
```
Correct values: cooling_capacity_l
```{r}
# if "nincs hűtő rész" is included -> change it to ""
dt_refrigerator$cooling_capacity_l <- str_replace(dt_refrigerator$cooling_capacity_l, "nincs hűtő rész", "0")
# when "palackos" expression is included -> convert it to litre
dt_refrigerator$cooling_capacity_l <- ifelse(grepl("palackos", dt_refrigerator$cooling_capacity_l, fixed = TRUE),
round(as.numeric(str_sub(dt_refrigerator$cooling_capacity_l, 1, 2)) * 2.9,0),
dt_refrigerator$cooling_capacity_l
)
# if "db" is included -> change it to ""
dt_refrigerator$cooling_capacity_l <- str_replace(dt_refrigerator$cooling_capacity_l, "l", "")
# if space is included -> change it to ""
dt_refrigerator$cooling_capacity_l <- str_replace(dt_refrigerator$cooling_capacity_l, " ", "")
# change decimal
dt_refrigerator$cooling_capacity_l <- str_replace(dt_refrigerator$cooling_capacity_l, ",", ".")
# change variable type
dt_refrigerator$cooling_capacity_l <- as.numeric(dt_refrigerator$cooling_capacity_l)
```
Correct values: freezing_capacity_l
```{r}
# if "nincs hűtő rész" is included -> change it to ""
dt_refrigerator$freezing_capacity_l <- str_replace(dt_refrigerator$freezing_capacity_l, "nincs fagyasztó rész", "0")
# if "db" is included -> change it to ""
dt_refrigerator$freezing_capacity_l <- str_replace(dt_refrigerator$freezing_capacity_l, "l", "")
# if space is included -> change it to ""
dt_refrigerator$freezing_capacity_l <- str_replace(dt_refrigerator$freezing_capacity_l, " ", "")
# change decimal
dt_refrigerator$freezing_capacity_l <- str_replace(dt_refrigerator$freezing_capacity_l, ",", ".")
# change variable type
dt_refrigerator$freezing_capacity_l <- as.numeric(dt_refrigerator$freezing_capacity_l)
```
Correct: item_price_edigital
```{r}
# if "Ft" is included -> change it to ""
dt_refrigerator$item_price_edigital <- str_replace(dt_refrigerator$item_price_edigital, "Ft", "")
# remove white space
dt_refrigerator$item_price_edigital <- gsub("^\\s+|\\s+$", "", dt_refrigerator$item_price_edigital)
dt_refrigerator$item_price_edigital <- gsub("\\s", "", dt_refrigerator$item_price_edigital)
# change variable type
dt_refrigerator$item_price_edigital <- as.numeric(dt_refrigerator$item_price_edigital)
```
Correct: item_price_edigital
```{r}
# change variable type
dt_refrigerator$item_price_mediamarkt <- as.numeric(dt_refrigerator$item_price_mediamarkt)
```
New varible: website
```{r}
# Define new variable
dt_refrigerator$website <- ifelse(is.na(dt_refrigerator$website_category_edigital) == FALSE,
"edigital",
"mediamarkt"
)
# Drop unused variables
dt_refrigerator$website_category_edigital <- NULL
dt_refrigerator$website_category_mediamarkt <- NULL
```
Merge items: Define:
---------AEG----------
NEV + (cooling_capacity_l, colour, width_cm, depth_cm +/1 cm, (height_cm +/-1 cm), weight_kg ha van)
---------AMICA----------
NEV (+ colour	width_cm	height_cm	depth_cm)
---------HOTPOINT ARISTON----------
NEV + 4. szó kell
---------BEKO----------
NEV (+ colour	width_cm	height_cm +/-3cm	depth_cm)
---------BOMANN----------
NEV + colour	(+width_cm	height_cm	depth_cm +/-1cm)
---------BOSCH----------
NEV (+ colour	ha van, width_cm	height_cm	depth_cm)
---------CANDY----------
NEV (+ colour	ha van, width_cm	height_cm	depth_cm)
---------ELECTROLUX----------
NEV + colour	(width_cm	height_cm	depth_cm)
---------GORENJE----------
NEV + colour	(width_cm	height_cm	depth_cm)
---------HAIER----------
NEV + colour	(+width_cm	height_cm	depth_cm +/-1cm)
---------HITACHI----------
NEV + colour	(width_cm	height_cm	depth_cm)
---------INDESIT----------
NEV + colour (+width_cm	height_cm +/-3cm	depth_cm)
---------LG----------
NEV (+ colour	ha van, width_cm	height_cm	depth_cm)
---------NAVON----------
NEV + energy_class (+ colour	ha van, width_cm	height_cm	depth_cm)
---------SAMSUNG----------
NEV + colour	(width_cm	height_cm,	depth_cm +/-4 cm)
---------WHIRLPOOL----------
NEV + 4. szó kell
```{r}
# Create unique item_id
unique_list_item <- dt_refrigerator %>% select("item_name_short", "colour") %>% unique()
dt_item_id <- data.table(common_item_id = seq(1: nrow(unique_list_item)),
item_name_short = unique_list_item$item_name_short,
colour = unique_list_item$colour
)
# Merge id to the table
dt_refrigerator <- merge(dt_refrigerator, dt_item_id, by = c("item_name_short","colour"))
write.table(dt_refrigerator, "dt_refrigerator.txt", sep = "|", row.names = FALSE)
```
Create technical attribute tabele to unify attributes
```{r}
# Filter for relevant columns
dt_attribute <- dt_refrigerator %>% select("common_item_id",
"item_name_short",
"colour",
"producer",
"type",
"energy_class",
"energy_consumption",
"guarantee_month",
"width_cm",
"height_cm",
"depth_cm",
"weight_kg",
"n_doors",
"cooling_capacity_l",
"freezing_capacity_l")
# Create attribute table
dt_attribute <- dt_attribute[,list(item_name_short = max(item_name_short, na.rm = T),
colour = max(colour, na.rm = T),
producer = max(producer, na.rm = T),
type = max(type, na.rm = T),
energy_class = max(energy_class, na.rm = T),
energy_consumption = max(energy_consumption, na.rm = T),
guarantee_month = max(guarantee_month, na.rm = T),
width_cm = max(width_cm, na.rm = T),
height_cm = max(height_cm, na.rm = T),
depth_cm = max(depth_cm, na.rm = T),
weight_kg = max(weight_kg, na.rm = T),
n_doors = max(n_doors, na.rm = T),
cooling_capacity_l = max(cooling_capacity_l, na.rm = T),
freezing_capacity_l = max(freezing_capacity_l, na.rm = T)),
by = common_item_id]
# Change Inf to Na
dt_attribute[dt_attribute$energy_consumption == "-Inf", "energy_consumption"] <- NA
dt_attribute[dt_attribute$guarantee_month == "-Inf", "guarantee_month"] <- NA
dt_attribute[dt_attribute$width_cm == "-Inf", "width_cm"] <- NA
dt_attribute[dt_attribute$height_cm == "-Inf", "height_cm"] <- NA
dt_attribute[dt_attribute$depth_cm == "-Inf", "depth_cm"] <- NA
dt_attribute[dt_attribute$weight_kg == "-Inf", "weight_kg"] <- NA
dt_attribute[dt_attribute$n_doors == "-Inf", "n_doors"] <- NA
dt_attribute[dt_attribute$cooling_capacity_l == "-Inf", "cooling_capacity_l"] <- NA
dt_attribute[dt_attribute$freezing_capacity_l == "-Inf", "freezing_capacity_l"] <- NA
dt_attribute[dt_attribute$colour == "-Inf", "colour"] <- NA
dt_attribute[dt_attribute$producer == "-Inf", "producer"] <- NA
dt_attribute[dt_attribute$type == "-Inf", "type"] <- NA
dt_attribute[dt_attribute$energy_class == "-Inf", "energy_class"] <- NA
```
# clear memory
rm(list=ls())
# set working directory
dir <- "C:/Users/gat/OneDrive – Central European University/Data_architecture/Home_work_data_product/"
data_in <- paste0(dir, "raw/")
data_out <-paste0(dir, "clean/")
# Read libraries
library(tidyverse)     # General purpose data wrangling
library(data.table)
library(dplyr)
library(readr) # for tsv
library(stringr)
# Read table
dt_refrigerator <- read_tsv(paste0(data_out, 'dt_refrigerator_openrefiner.tsv')) %>% as.data.table()
# Check unique values
dt_refrigerator$producer %>% unique()
# OK
# Check unique values
dt_refrigerator$energy_class %>% unique()
# OK
# Change data type
dt_refrigerator$guarantee_month <- dt_refrigerator$guarantee_month %>% as.numeric()
# Check unique values
dt_refrigerator$guarantee_month %>% unique()
# OK
# get the first 3 characters, typically it is a number meaning the annual energy consumption in kWh
# if it is smaller (or not a number) than 1 -> get the first 5 character
dt_refrigerator$energy_consumption <- ifelse(substr(dt_refrigerator$energy_consumption, 1, 3) < 1,
substr(dt_refrigerator$energy_consumption, 1, 5),
substr(dt_refrigerator$energy_consumption, 1, 3)
)
# in some case it contains "/" -> get the last 5 character
dt_refrigerator$energy_consumption <- ifelse(grepl("/",substr(dt_refrigerator$energy_consumption, 1, 5), fixed = TRUE),
str_sub(dt_refrigerator$energy_consumption, -5),
dt_refrigerator$energy_consumption
)
# change decimal
dt_refrigerator$energy_consumption <- str_replace(dt_refrigerator$energy_consumption, ",", ".")
# change variable type
dt_refrigerator$energy_consumption <- as.numeric(dt_refrigerator$energy_consumption)
# if value < 5 -> it is a daily consumption data -> convert it to annual one
dt_refrigerator$energy_consumption <- ifelse(dt_refrigerator$energy_consumption < 5,
dt_refrigerator$energy_consumption * 365,
dt_refrigerator$energy_consumption
)
# Round values
dt_refrigerator$energy_consumption <- round(dt_refrigerator$energy_consumption,0)
# if "cm" is included -> change it to ""
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, "cm", "")
# if space is included -> change it to ""
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, " ", "")
# change decimal
dt_refrigerator$width_cm <- str_replace(dt_refrigerator$width_cm, ",", ".")
# "mm" is included -> convert is to cm
dt_refrigerator$width_cm <- ifelse(grepl("mm", dt_refrigerator$width_cm,fixed = TRUE),
as.numeric(str_replace(dt_refrigerator$width_cm, "mm", "")) / 10,
dt_refrigerator$width_cm
)
# change variable type
dt_refrigerator$width_cm <- as.numeric(dt_refrigerator$width_cm)
# Round values
dt_refrigerator$width_cm <- round(dt_refrigerator$width_cm, 0)
dt_refrigerator_final <- read_tsv(paste0(data_out, 'dt_refrigerator_workfile.tsv')) %>% as.data.table()
data_out <-paste0(dir, "work/")
dt_refrigerator_final <- read_tsv(paste0(data_out, 'dt_refrigerator_workfile.tsv')) %>% as.data.table()
write.table(dataset,path = paste0(data_out,"dt_refrigerator_workfile.csv"), sep = "|", row.names = FALSE, col.names = TRUE)
?write.table(
write.table
?write.table
write.table(dataset,file = paste0(data_out,"dt_refrigerator_workfile.csv"), sep = "|", row.names = FALSE, col.names = TRUE)
write.table(dataset,paste0(data_out,"dt_refrigerator_workfile.txt"), sep = "|", row.names = FALSE, col.names = TRUE)
write.table(dt_refrigerator_final,paste0(data_out,"dt_refrigerator_workfile.txt"), sep = "|", row.names = FALSE, col.names = TRUE)
# Load workfile
dataset <- data.table(read.table("dt_refrigerator_workfile.txt", sep = "|", header = T))
library(shiny); runApp('Refrigerators_shinyapp.R')
